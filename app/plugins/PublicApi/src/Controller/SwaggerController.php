<?php
declare(strict_types=1);

namespace PublicApi\Controller;

use PublicApi\Controller\AppController;
use Cake\Core\Configure;
use SwaggerBake\Lib\Attribute\OpenApiOperation;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\Service\OpenApiControllerService;
use SwaggerBake\Lib\SwaggerFactory;

class SwaggerController extends AppController
{
    /**
     * @var \SwaggerBake\Controller\Component\SwaggerUiComponent
     */
    public $SwaggerUi;

    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Displays either Swagger UI or Redoc
     *
     * @param \SwaggerBake\Lib\Service\OpenApiControllerService $service Builds OpenAPI JSON and hot reloads if enabled
     * @return \Cake\Http\Response Renders view
     * @throws \ReflectionException
     */
    #[OpenApiOperation(isVisible: false)]
    public function index()
    {
        Configure::load('PublicApi.swagger_bake', 'default' ,false);
        $configuration = new Configuration(Configure::read('SwaggerBake'));
        $service = new OpenApiControllerService($configuration, (new SwaggerFactory($configuration))->create());

        /*
         * Rebuild OpenAPI if hotReload is enabled
         */
        $service->build();

        /*
         * Set some view vars
         */
        $config = $service->getConfig();

        $title = $config->getTitleFromYml();
        $url = $config->getWebPath();
        $this->set(compact('title', 'url'));

        /*
         * Set layout to either swagger or redoc
         *
         * @see vendor/cnizzardini/cakephp-swagger-bake/templates/layout
         */
        $doctype = $service->getDocType($this->request);
        $this->viewBuilder()->setLayout($config->getLayout($doctype));

        /*
         * Render either the swagger or redoc view
         *
         * @see vendor/cnizzardini/cakephp-swagger-bake/templates/Swagger
         */
        return $this->render($config->getView($doctype));
    }
}
